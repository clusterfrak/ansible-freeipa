---
# =====================================
# AWS Environment Check
# =====================================
- name: Checking if runtime environment is AWS...
  uri:
    url: http://169.254.169.254/latest/meta-data
    timeout: 2
  register: aws_uri_check
  ignore_errors: yes

- name: "AWS Response:"
  debug:
    msg:
      - "Response Code: {{ aws_uri_check.status }} --> {{ aws_uri_check.msg }}"

- name: Setting is_aws flag value...
  set_fact:
    is_aws: "{{ aws_uri_check.status == 200 }}"
  when: aws_uri_check.status == 200

- name: "{{ 'EnvironmentType: AWS' if is_aws else 'EnvironmentType: Non-AWS' }}"
  debug:
    msg:
      - "AWS Environment check returned: {{ aws_uri_check.status }}"
      - "is_aws flag set to: {{ 'True' if aws_uri_check.status == 200 else 'False'  }}"

# =====================================
# Firewalld Service Check
# =====================================
- name: Gathering list of all installed packages...
  package_facts:
    manager: auto

- name: Checking if firewalld is installed...
  set_fact:
    is_firewalld: "{{ 'firewalld' in ansible_facts.packages }}"
  when: '"firewalld" in ansible_facts.packages'

- name: "Firewalld State: {{ 'Installed' if is_firewalld else 'Not Installed' }}"
  debug:
    msg:
      - "is_firewalld flag set to: {{ 'True' if 'firewalld' in ansible_facts.packages else 'False'  }}"

# =====================================
# FreeIPA Service Install
# -------------------------------------
# Install FreeIPA and Dependancy Packages
# =====================================
- name: Installing Epel Yum Repository...
  yum:
    name:
      - epel-release
    state: present

- name: Installing FreeIPA and dependancy packages...
  yum:
    name:
      - bind
      - bind-utils
      - ipa-server
    state: present

- name: Adding ipa-server-dns package (EL7)...
  yum:
    name:
      - ipa-server-dns
    state: present
  when: ansible_distribution_major_version > '6'

# -------------------
# Configure Firewalld
# -------------------
- name: Stopping firewalld service...
  systemd:
    name: firewalld
    state: stopped
  when:
    - is_firewalld

- name: Re-Gathering Service States...
  service_facts:
  when: is_firewalld

- name: "Firewalld Service State:"
  debug:
    msg: "{{ ansible_facts.services['firewalld.service'] }}"
  when: is_firewalld

- name: Adding HTTP(S)|LDAP(s)|Kerberos services to firewalld...
  firewalld: service={{ item }} permanent=true state=enabled
  with_items:
    - http
    - https
    - ldap
    - ldaps
    - kerberos
  when: is_firewalld

- name: Adding Kerberos|Kerberos Password Exchange|NTP UDP ports to firewalld...
  firewalld: port={{ item }} permanent=true state=enabled
  with_items:
    - 88/udp
    - 464/udp
    - 123/udp
  when: is_firewalld

- name: Starting firewalld service...
  systemd:
    name: firewalld
    state: started
  when: is_firewalld

- name: Re-Gathering Service States...
  service_facts:
  when: is_firewalld

- name: "Firewalld Service State:"
  debug:
    msg: "{{ ansible_facts.services['firewalld.service'] }}"
  when: is_firewalld

# -------------------
# Run FreeIPA Setup
# -------------------
# Stat the named.conf and IPA default.conf file, if the file exists, then IPA is already configured.
- name: Checking for previous freeipa installations...
  stat: path=/etc/ipa/default.conf
  register: ipa_config

- name: "Searching for existing IPA config file /etc/ipa/default.conf:"
  debug:
    msg:
      - "{{ 'FILE FOUND' if ipa_config.stat.exists else 'FILE NOT FOUND' }}"

# Perform Free IPA Setup
- name: Perform the FreeIPA setup
  command: |
    ipa-server-install \
    --unattended \
    --realm={{ domain }} \
    --ds-password={{ dsmgr_password }} \
    --admin-password={{ admin_password }} \
    --setup-dns \
    --forwarder={{ primary_dns_forwarder }} \
    --forwarder={{ secondary_dns_forwarder }}
  register: ipa_setup
  failed_when: "'FAILED' in ipa_setup.stderr"
  when: not ipa_config.stat.exists

- name: "IPA Setup State:"
  debug:
    msg:
      - "{{ ipa_setup.stdout }}"
  when: not ipa_config.stat.exists

# Remove password references if executed in AWS
- name: Removing MGR_PASS references...
  lineinfile:
    dest: /etc/environment
    state: absent
    regexp: '^export MGR_PASS='
  when: is_aws

- name: Removing ADMIN_PASS references...
  lineinfile:
    dest: /etc/environment
    state: absent
    regexp: '^export ADMIN_PASS='
  when: is_aws

- name: Scrubbing Environment Variables...
  command: "unset MGR_PASS && unset ADMIN_PASS"
  when: is_aws

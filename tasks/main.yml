---
# Check to see if we are running in AWS
- name: Check if host is running in AWS
  uri:
    url: http://169.254.169.254/latest/meta-data
    timeout: 2
  register: aws_uri_check
  ignore_errors: yes

- name: Set Flag if running in AWS
  set_fact:
    is_aws: "{{ aws_uri_check.status == 200 }}"
  when: not "'FAILED' in aws_uri_check.stderr"
  ignore_errors: yes

- debug:
    msg:
      - "{{ 'EnvironmentType: AWS' if is_aws else 'EnvironmentType: Non-AWS' }}"
      - "AWS Environment check returned:"
      - "{{ aws_uri_check.status }}"

# Check to see if firewalld is installed
- name: Grab list of installed packages
  package_facts:
    manager: auto

# Epel Install
- name: Add Epel Yum Repo
  yum:
    name:
      - epel-release
    state: present

# FreeIPA Installation
- name: Add required FreeIPA packages
  yum:
    name:
      - bind
      - bind-utils
      - ipa-server
    state: present

- name: Add ipa-server-dns package if current OS is EL7 or greater
  yum:
    name:
      - ipa-server-dns
    state: present
  when: ansible_distribution_major_version > '6'

# Configure Firewalld
- name: Stop firewalld service if present
  systemd:
    name: firewalld
    state: stopped
  register: firewalld_service_stop
  when:
    - ansible_distribution_major_version > '6'
    - '"firewalld" in ansible_facts.packages'
  ignore_errors: yes

- debug:
    msg: "{{ firewalld_service_stop.status }}"
  when:
    - ansible_distribution_major_version > '6'
    - '"firewalld" in ansible_facts.packages'
  ignore_errors: yes

- name: Add HTTP(S)/LDAP(s)/Kerberos services to firewalld if present
  firewalld: service={{ item }} permanent=true state=enabled
  with_items:
    - http
    - https
    - ldap
    - ldaps
    - kerberos
  when:
    - ansible_distribution_major_version > '6'
    - '"firewalld" in ansible_facts.packages'

- name: Add Kerberos/Kerberos password exchange/NTP UDP ports to firewalld if present
  firewalld: port={{ item }} permanent=true state=enabled
  with_items:
    - 88/udp
    - 464/udp
    - 123/udp
  when:
    - ansible_distribution_major_version > '6'
    - '"firewalld" in ansible_facts.packages'

- name: Start firewalld if present
  systemd:
    name: firewalld
    state: started
  register: firewalld_service_start
  when:
    - ansible_distribution_major_version > '6'
    - '"firewalld" in ansible_facts.packages'

- debug:
    msg: "{{ firewalld_service_start.status }}"
  when:
    - ansible_distribution_major_version > '6'
    - '"firewalld" in ansible_facts.packages'
  ignore_errors: yes

# Stat the named.conf and IPA default.conf file, if the file exists, then IPA is already configured.
- name: Check to see if IPA configuration file exists
  stat: path=/etc/ipa/default.conf
  register: ipa_config

- debug:
    msg:
      - "Searching for IPA config file /etc/ipa/default.conf..."
      - "{{ 'FILE FOUND' if ipa_config.stat.exists else 'FILE NOT FOUND' }}"

# Perform Free IPA Setup
- name: Perform the FreeIPA setup
  command: |
    ipa-server-install \
    --unattended \
    --realm={{ domain }} \
    --ds-password={{ dsmgr_password }} \
    --admin-password={{ admin_password }} \
    --setup-dns \
    --forwarder={{ primary_dns_forwarder }} \
    --forwarder={{ secondary_dns_forwarder }}
  register: ipa_setup
  failed_when: "'FAILED' in ipa_setup.stderr"
  when: not ipa_config.stat.exists

- debug:
    msg:
      - "IPA Setup State: {{ ipa_setup.stdout }}"
  when: not ipa_config.stat.exists

# Remove password references if executed in AWS
- name: Cleanup MGR_PASS
  lineinfile:
    dest: /etc/environment
    state: absent
    regexp: '^export MGR_PASS='
  when: is_aws

- name: Cleanup ADMIN_PASS
  lineinfile:
    dest: /etc/environment
    state: absent
    regexp: '^export ADMIN_PASS='
  when: is_aws

- name: Cleanup Environment Variables
  command: "unset MGR_PASS && unset ADMIN_PASS"
  when: is_aws
